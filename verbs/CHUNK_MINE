--[[ CHUNK_MINE
    A refined strip-mining algorithm that breaks potential mining sites down into
    sectors. The goal is to make the mining algorithm cleaner, with less potential
    for breakage, as well as easily serializable.
    
    Matthew DiBernardo [01.13.2015]
]]--


--[[ Constants ]]--
local DEFAULT_AXIS = "north" -- Tries to align all mining sites along this axis.

-- Typically you won't need this, but lacking other reasonable Y coords this will
-- be the upper mining limit.
local DEFAULT_MINING_HEIGHT = 65

--[[ Load UUID ]]--
function loadUUID()
    local uuidFile = "" .. swarmlib.identityDir .. "uuid"
    if fs.exists(uuidFile) and not fs.isDir(uuidFile) then
        local f = fs.open(uuidFile, "r")
        if not f then
            error("uuid file exists, but couldn't be opened!")
        end
        local uuid = f.readLine()
        f.close()
        if string.len(uuid) == 8 then
            return uuid
        else
            error("STRIP_MINE: Loaded uuid was invalid, aborting!")
        end
    end
end

-- The drone's UUID is important for determining which sectors this drone is responsible for.
local uuid = loadUUID()

--[[ Locate Valid Mining Chunk ]]--
function getValidMiningChunk()
    
end

--[[ Excavate ]]--
-- A single step of digging downwards
function excavate()
    local success, block = turtle.inspectDown()
    
    -- If we've hit bedrock, we're done with this sub-sector
    if success and block.name == "minecraft:bedrock" then
        return false
    end
    
    -- Otherwise, there's still room to dig
    mobility.digDown()
    if mobility.moveDown(1) then
        local success, block = turtle.inspect()
        if success then
            if swarmlib.matchResourceByName(resource) then
                mobility.dig()
            end
        end
    end
    return true
end

--[[ Execute ]]--
function execute(resource)
    
end