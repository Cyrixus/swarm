--[[ mobility
    A self-tracking turtle API for use with swarm.
    
    Matthew DiBernardo [01.10.2015]
]]--

--[[ World Constants ]]--
local TOP = 256
local BOTTOM = 0
local CHUNK_SIZE = 16


--[[ Facing Vecs ]]--
facings = {}
facings.north = vector.new(0, 0, -1)  -- Negative Z
facings.east = vector.new(1, 0, 0)    -- Positive X
facings.south = vector.new(0, 0, 1)   -- Positive Z
facings.west = vector.new(-1, 0, 0)    -- Negative X
    
intFacings = {}
intFacings[0] = "north"
intFacings[1] = "east"
intFacings[2] = "south"
intFacings[3] = "west"

up = vector.new(0, 1, 0)
down = vector.new(0, -1, 0)


--[[ Current State ]]--
-- Computer Position
local localPosition = vector.new(0, 0, 0) -- Assume relative origin as start, unless supplied in init
local currentFacing = "north"

-- Worldspace Offset
-- The vector from World Origin (absolute 0, 0, 0) to Local Origin (relative 0, 0, 0)
local worldOffset = vector.new(0, 0, 0)


--[[ Accessors for Position & Facing ]]--
-- Relative Position
function getPosition()
    return localPosition
end

function setPositionXZ(x, z, height)
    local x = x or localPosition.x
    local y = height or localPosition.y
    local z = z or localPosition.z
    localPosition = vector.new(x, y, z)
end

function setPosition(pos)
    setPositionXZ(pos.x, pos.z, pos.y)
end

-- World Offset
-- This is what you want to update when you're calibrating with GPS.
function getWorldOffset()
    return worldOffset
end

function setWorldOffsetXZ(x, z, height)
    local x = x or 0
    local y = height or 0
    local z = z or 0
    worldPosition = vector.new(x, y, z)
end

function setWorldOffset(vec)
    setWorldOffsetXZ(vec.x, vec.z, vec.y)
end

-- Absolute Position
function getAbsolutePosition()
    return getWorldOffset() + getPosition()
end

function vecToAbsolutePosition(vec)
    if type(vec) == "vector" then
        return getWorldOffset() + vec
    else
        error("MOBILITY: vecToAbsolutePosition() could not complete because supplied param was not a vector [" .. vec .. "]")
    end
end

function XZToAbsolutePosition(x, z, height)
    return vecToAbsolutePosition(vector.new(x, height, z))
end

-- Facing
local function getFacingInt(facing)
    for i, f in pairs(intFacings) do
        if f == facing then
            return i
        end
    end
    -- This should never happen unless someone fucked up
    error("MOBILITY: getFacingInt() could not complete because facing was invalid [" .. facing .. "]")
end

function getIntFacing()
    getFacingInt(currentFacing)
end

function setIntFacing(facing)
    if facing >= 0 and facing <= 3 then
        currentFacing = intFacings[facing]
    end
end

function getFacing()
    return currentFacing
end

function setFacing(facing)
    setIntFacing(getFacingInt(facing))
end


--[[ Region and Collision Math ]]--
function isVecInRegion(vec, regVec1, regVec2)
    -- Check X
    if regVec1.x <= regVec2.x then
        if vec.x < regVec1.x or vec.x > regVec2.x then return false end
    else
        if vec.x > regVec1.x or vec.x < regVec1.x then return false end
    end
    
    -- Check Y
    if regVec1.y <= regVec2.y then
        if vec.y < regVec1.y or vec.y > regVec2.y then return false end
    else
        if vec.y > regVec1.y or vec.y < regVec1.y then return false end
    end
    
    -- Check Z
    if regVec1.z <= regVec2.z then
        if vec.z < regVec1.z or vec.z > regVec2.z then return false end
    else
        if vec.z > regVec1.z or vec.z < regVec1.z then return false end
    end
    return true
end

-- Chunk Containing Local-space Vec
function chunkContainingVec(vec)
    local absVec = vecToAbsolutePosition(vec)
    return chunkContainingAbsVec(absVec)
end

-- Chunk Containing World-space Vec
function chunkContainingAbsVec(vec)
    local westEdge = vec.x - math.fmod(vec.x, CHUNK_SIZE)
    local eastEdge = westEdge + CHUNK_SIZE - 1
    local northEdge = vec.x - math.fmod(vec.z, CHUNK_SIZE)
    local southEdge = northEdge + CHUNK_SIZE - 1
    return vector.new(westEdge, TOP, northEdge), vector.new(eastEdge, BOTTOM, southEdge)
end
    

-- distToRegion, AKA dist to Axis-Aligned Bounding Box
-- Note: It's assumed that all three vecs are collectively in world-space OR local-space
function distToRegion(vec, regVec1, regVec2)
    -- Closest point in a region to a point inside the region is the region itself
    local dist = 0.0
    
    -- Sum X Distance
    local minX = math.min(regVec1.x, regVec2.x)
    local maxX = math.max(regVec1.x, regVec2.x)
    if vec.x < minX then dist = dist + ((minX - vec.x) * (minX - vec.x)) end
    if vec.x > maxX then dist = dist + ((vec.x - maxX) * (vec.x - maxX)) end
    
    -- Sum Y Distance
    local minY = math.min(regVec1.y, regVec2.y)
    local maxY = math.max(regVec1.y, regVec2.y)
    if vec.y < minY then dist = dist + ((minY - vec.y) * (minY - vec.y)) end
    if vec.y > maxY then dist = dist + ((vec.y - maxY) * (vec.y - maxY)) end
    
    -- Sum z Distance
    local minZ = math.min(regVec1.z, regVec2.z)
    local maxZ = math.max(regVec1.z, regVec2.z)
    if vec.z < minZ then dist = dist + ((minZ - vec.z) * (minZ - vec.z)) end
    if vec.z > maxZ then dist = dist + ((vec.z - maxZ) * (vec.z - maxZ)) end
    
    return dist
end


--[[ Basic Movement Functions ]]--
function moveForward(count)
    local count = count
    while count > 0 do
        if turtle.forward() then
            count = count - 1
            localPosition = localPosition + facings[currentFacing]
        else
            return false -- Couldn't complete the full movement
        end
    end
    return true -- Completed the full movement
end

function moveBack(count)
    local count = count
    while count > 0 do
        if turtle.back() then
            count = count - 1
            localPosition = localPosition - facings[currentFacing]
        else
            return false -- Couldn't complete the full movement
        end
    end
    return true -- Completed the full movement
end

function moveUp(count)
    local count = count
    while count > 0 do
        if turtle.up() then
            count = count - 1
            localPosition = localPosition + up
        else
            return false -- Couldn't complete the full movement
        end
    end
    return true -- Completed the full movement
end

function moveDown(count)
    local count = count
    while count > 0 do
        if turtle.down() then
            count = count - 1
            localPosition = localPosition + down
        else
            return false -- Couldn't complete the full movement
        end
    end
    return true -- Completed the full movement
end


--[[ Turning Methods ]]--
function turnRight(count)
    local count = count
    while count > 0 do
        if turtle.turnRight() then
            count = count - 1
            setIntFacing(math.fmod(getFacingInt(currentFacing) + 1, 4))
        else
            return false
        end
    end
    return true
end

function turnLeft(count)
    local count = count
    while count > 0 do
        if turtle.turnLeft() then
            count = count - 1
            setIntFacing(math.fmod(getFacingInt(currentFacing) - 1, 4))
        else
            return false
        end
    end
    return true
end

function turn(facing)
    getFacingInt(facing) -- So long as this doesn't throw an error, our target facing should be valid.
    while currentFacing ~= facing do
        if math.fmod(getFacingInt(currentFacing) - 1, 4) == getFacingInt(facing) then
            if not turnLeft(1) then return false end
        else
            if not turnRight(1) then return false end
        end
    end
    return true
end

function turnToFaceVec(target)
    local vecToTarget = target - localPosition
    if math.abs(vecToTarget.z) > math.abs(vecToTarget.x) then
        -- Should face along north-south
        if vecToTarget.z <= 0 then
            turn("north")
        else
            turn("south")
        end
    else
        -- Should face along east-west
        if vecToTarget.x > 0 then
            turn("east")
        else
            turn("west")
        end
    end
end

--[[ Move Towards ]]--
function moveTowardVec(target)
    -- First, make sure we're not already there
    if target.x == localPosition.x and target.y == localPosition.y and target.z == localPosition.z then
        return true -- We're already there!
    end
    
    -- Figure out which direction we need to head to get there
    local dir = target - localPosition
    
    -- First, attempt to get on the same y-level
    if dir.y > 0 then
        if moveUp(1) then return true end
    end
    
    if dir.y < 0 then
        if moveDown(1) then return true end
    end
    
    -- Otherwise, we were already on the same plane, or can't move up
    -- right now. Try getting to the same place on the north-south axis.
    
    -- Need to go South
    if dir.z > 0 then
        if turn("south") then
            if moveForward(1) then return true end
        end
        -- TODO: Should we be worried if we can't turn?
    end
    
    -- Need to go North
    if dir.z < 0 then
        if turn("north") then
            if moveForward(1) then return true end
        end
    end
    
    -- Otherwise, we're already on the same North-South axis, or we're stuck.
    -- Try the East-West!
    
    -- Need to go East
    if dir.x > 0 then
        if turn("east") then
            if moveForward(1) then return true end
        end
    end
    
    -- Need to go West
    if dir.x < 0 then
        if turn("west") then
            if moveForward(1) then return true end
        end
    end
    
    -- Otherwise, we can't move in a direction that would put us closer to the objective
    return false
end

function moveTowardXZ(x, z, height)
    x = x or localPosition.x
    z = z or localPosition.z
    height = height or localPosition.y
    return moveTowardVec(vector.new(x, z, height))
end

--[[ Dig Methods ]]--
-- mobility.dig() methods don't actually move in a direction (except the digToward() set)
-- but they do ensure that the block ahead is actually clear before returning, even in
-- cases such as sand and gravel, where another block can appear in the same place.
function dig()
    while turtle.detect() do
        turtle.dig()
    end
end

function digUp()
    while turtle.detectUp() do
        turtle.digUp()
    end
end

function digDown()
    while turtle.detectDown() do
        turtle.digDown()
    end
end

--[[ Dig Toward ]]--
function digTowardVec(target)
    -- First, make sure we're not already there
    if target.x == localPosition.x and target.y == localPosition.y and target.z == localPosition.z then
        return true -- We're already there!
    end
    
    -- Figure out which direction we need to head to get there
    local dir = target - localPosition
    
    -- First, attempt to get on the same y-level
    if dir.y > 0 then
        if not moveUp(1) then 
            digUp()
            if moveUp(1) then return true end
        else
            return true
        end
    end
    
    if dir.y < 0 then
        if not moveDown(1) then
            digDown()
            if moveDown(1) then return true end
        else
            return true
        end
    end
    
    -- Otherwise, we were already on the same plane, or can't move up
    -- right now. Try getting to the same place on the north-south axis.
    
    -- Need to go South
    if dir.z > 0 then
        if turn("south") then
            if not moveForward(1) then
                dig()
                if moveForward(1) then return true end
            else
                return true
            end
        end
        -- TODO: Should we be worried if we can't turn?
    end
    
    -- Need to go North
    if dir.z < 0 then
        if turn("north") then
            if not moveForward(1) then
                dig()
                if moveForward(1) then return true end
            else
                return true
            end
        end
    end
    
    -- Otherwise, we're already on the same North-South axis, or we're stuck.
    -- Try the East-West!
    
    -- Need to go East
    if dir.x > 0 then
        if turn("east") then
            if not moveForward(1) then
                dig()
                if moveForward(1) then return true end
            else
                return true
            end
        end
    end
    
    -- Need to go West
    if dir.x < 0 then
        if turn("west") then
            if not moveForward(1) then
                dig()
                if moveForward(1) then return true end
            else
                return true
            end
        end
    end
    
    -- Otherwise, we can't move in a direction that would put us closer to the objective
    return false
end

function digTowardXZ(x, z, height)
    x = x or localPosition.x
    z = z or localPosition.z
    height = height or localPosition.y
    return digTowardVec(vector.new(x, z, height))
end