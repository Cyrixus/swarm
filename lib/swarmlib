--[[ swarmlib
    A collection of functions and methods used across the entire swarm project.
    
    Matthew DiBernardo [01.11.2015]
]]--


--[[ Constants ]]--
libDir = "/lib/"
-- Directories for all the key components of the Behavior Engine
behaviorDir = "/behaviors/"
verbDir = "/verbs/"
resourceDir = "/resources/"
conditionalDir = "/conditionals/"
-- Directories for information specific to this drone.
identityDir = "/id/" -- As in the psychological id. This dir contains the knowledge of "self".
locationsDir = "/id/locs/"

-- Location Constants
pointType = "point"
regionType = "region"


--[[ Required Libs ]]--
local apiLocation = "" .. libDir .. "JSON"
if not os.loadAPI(apiLocation) then error("Failed to load JSON API @ [" .. apiLocation .. "], aborting.") end
local JSON = JSON.OBJDEF:new() -- Because, you know, CC just letting us load libs normally was too hard.


--[[ Relative Directory ]]--
-- Because we can't have nice things, like shell.resolve() from library code.
local relativeDir = ""
function setRelativeDir(dir) relativeDir = dir end


--[[ Helper Methods ]]--
-- Function for loading libs
function loadLib(libLocation)
    if not os.loadAPI(libLocation) then
        print("Failed to load library [" .. libLocation .. "], returning false.")
        return false
    end
    return true
end

-- A simple UUID method borrowed from https://gist.github.com/jrus/3197011 and simplified further
-- because we don't REALLY need a whole UUID for anything here
local random = math.random
function UUID()
    local template ='xxxxxxxx'
    return string.gsub(template, '[xy]', function (c)
            local v = (c == 'x') and random(0, 0xf) or random(8, 0xb)
            return string.format('%x', v)
        end)
end


--[[ Engine Calls ]]--
function checkConditional(conditional, params)
    local conLoc = relativeDir .. conditionalDir .. conditional
    if loadLib(conLoc) then
        -- Call the conditional, with the provided params
        local result = 0
        if type(params) == "table" then
            result = _G[conditional].compare(unpack(params))
        else
            result = _G[conditional].compare(params)
        end
        
        -- Clean up the API when we're done
        os.unloadAPI(conLoc)
        if not result then error("WARNING: Condtitional [" + conditional + "] returned nil result!") end
        if result >= 1 then return true end
    end
    return false
end

function executeVerb(verb, params)
    local verbLoc = relativeDir .. verbDir .. verb
    if loadLib(verbLoc) then
        -- Execute the verb, with the provided params
        if type(params) == "table" then
            _G[verb].execute(unpack(params))
        else
            _G[verb].execute(params)
        end
        
        -- Clean up the API when we're done
        os.unloadAPI(verbLoc)
    end
end

function matchResourceByName(resource, name)
    local resLoc = relativeDir .. resourceDir .. resource
    if loadLib(resLoc) then
        -- Perform the match
        local result = _G[resource].matchName(name)
        
        -- Clean up the API when we're done
        os.unloadAPI(resLoc)
        return result
    end
end

function forEachLocation(callback, locID) -- Make sure callback is a function accepting a table as a param
    local locsFolder = relativeDir .. locationsDir
    if not fs.exists(locsFolder) then fs.makeDir(locsFolder) end
    
    local locs = fs.list(locsFolder)
    for i, locFile in ipairs(locs) do
        -- Check to see if this location is in the set we're looking for
        if locID == nil or string.find(locFile, locID, 1, true) then
            local locFileName = relativeDir .. locationsDir .. locFile
        
            -- Open each non-dir file
            if not fs.isDir(locFileName) then
                local f = fs.open(locFileName, "r")
                if not f then
                    error("Couldn't open file [" .. locFileName .. "]")
                end
                
                -- Decode its contents into a lua table
                local loc = JSON:decode(f.readAll())
                f.close()
                
                -- Call the callback
                callback(loc)
            end
        end
    end
end

function distToLocation(vec, loc)
    if loc.type == pointType then
        local distVec = vector.new(loc.x - vec.x, loc.y - vec.y, loc.z - vec.z)
        return distVec:length()
    elseif loc.type == regionType then
        return mobility.distToRegion(vec, loc.v1, loc.v2)
    end
    return nil 
end

function getClosestLocation(locID)
    -- Build a list of potential locations
    local targetList = {}
    forEachLocation(function(loc) targetList[#targetList + 1] = loc end, locID)
    
    -- If there's none, finish.
    if #targetList == 0 then return end
    
    -- If there's only one, that's what we're after!
    local targetLoc = nil
    if #targetList == 1 then
        targetLoc = targetList[1]
    end
    
    -- If there's more than one, find the closest
    local pos = mobility.getPosition()
    if #targetList > 1 then
        for i, l in ipairs(targetList) do
            if targetLoc == nil then
                targetLoc = l
            else
                if distToLocation(pos, targetLoc) < distToLocation(pos, l) then
                    targetLoc = l
                end
            end
        end 
    end
    
    return targetLoc
end

function getExactLocation(locID, uuid)
    local locsFolder = relativeDir .. locationsDir
    local locFile = locsFolder .. locID .. "-" .. uuid
    
    -- Location doesn't exist, abort.
    if not fs.exists(locFile) or fs.isDir(locFile) then return nil end
    
    -- Location does exist, load and return it.
    local f = fs.open(locFile, "r")
    if not f then
        error("Couldn't open file [" .. locFileName .. "]")
    end
    
    -- Decode its contents into a lua table
    local loc = JSON:decode(f.readAll())
    f.close()
    
    -- Return the location
    return loc
end

function createPointLocationXZ(locID, x, z, height, facing, uuid, meta)
    local locsFolder = relativeDir .. locationsDir
    
    -- Validate all of the params, or replace the missing bits with parts of our current location
    local currentPos = mobility.getPosition()
    local currentFacing = mobility.getFacing()
    
    local loc = {}
    loc.name = locID
    loc.type = pointType
    loc.x = x or currentPos.x
    loc.z = z or currentPos.z
    loc.y = height or currentPos.y
    loc.facing = facing or currentFacing
    loc.uuid = uuid or UUID()
    loc.meta = meta
    
    -- Write the location to a file
    local f = fs.open(locsFolder .. loc.name .. "-" .. loc.uuid, "w")
    if not f then
        error("Couldn't loc file for writing!")
    end
    f.write(JSON:encode(loc))
    f.close()   
end

function createPointLocation(locID, vec, facing, uuid, meta)
    createPointLocationXZ(locID, vec.x, vec.z, vec.y, facing, uuid, meta)
end

function createRegionLocation(locID, vec1, vec2, uuid, meta)
    local locsFolder = relativeDir .. locationsDir
    
    if not vec1 or not vec2 then error("SWARMLIB: Creating a region requires two valid vectors!") end
    
    -- Validate all of the params, or replace the missing bits with parts of our current location
    local currentPos = mobility.getPosition()
    local currentFacing = mobility.getFacing()
    
    local loc = {}
    loc.name = locID
    loc.type = regionType
    loc.v1 = vec1
    loc.v2 = vec2
    loc.uuid = uuid or UUID()
    loc.meta = meta
    
    -- Write the location to a file
    local f = fs.open(locsFolder .. loc.name .. "-" .. loc.uuid, "w")
    if not f then
        error("SWARMLIB: Couldn't loc file for writing!")
    end
    f.write(JSON:encode(loc))
    f.close()
end

function deleteLocation(loc)
    if not loc.name or not loc.uuid then return end
    
    -- Remove the file containing this location from the file system
    local locsFolder = relativeDir .. locationsDir
    fs.delete(locsFolder .. loc.name .. "-" .. loc.uuid)
end

--[[ Unload Libs ]]--
os.unloadAPI("" .. libDir .. "JSON")